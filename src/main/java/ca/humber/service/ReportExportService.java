package ca.humber.service;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.ColumnText;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfPageEventHelper;
import com.itextpdf.text.pdf.PdfWriter;

import ca.humber.model.User;
import ca.humber.controller.AlertDialog;
import ca.humber.util.SessionManager;
import javafx.collections.ObservableList;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.layout.VBox;
import javafx.stage.FileChooser;

import java.awt.Desktop;

public class ReportExportService {

    public static String getDefaultFileName(String reportType) {
        LocalDateTime now = LocalDateTime.now();
        String formattedReportType = reportType != null ? 
                                     reportType.replaceAll("\\s+", "_").toLowerCase() : "report";
        return formattedReportType + "_" + 
               now.format(DateTimeFormatter.ofPattern("yyyyMMdd_HHmmss")) + 
               ".pdf";
    }

    public static File showSaveDialog(javafx.scene.Node parent, String defaultFileName) {
        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("Save PDF Report");
        fileChooser.getExtensionFilters().add(
                new FileChooser.ExtensionFilter("PDF Files", "*.pdf"));
        fileChooser.setInitialFileName(defaultFileName);
        return fileChooser.showSaveDialog(parent.getScene().getWindow());
    }

    public static void exportReportToPdf(
            File file,
            String reportType,
            TableView<ObservableList<Object>> reportTableView,
            String totalRevenueText,
            String owedAmountText,
            boolean isRevenueBoxVisible,
            boolean isOwedAmountBoxVisible,
            VBox customerSummaryBox) {

        try {
            Document document = new Document(PageSize.A4.rotate());
            PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(file));
            document.open();

            String reportTitle = reportType != null ? reportType : "Report";
            Paragraph title = new Paragraph(reportTitle, new Font(Font.FontFamily.HELVETICA, 16, Font.BOLD));
            title.setAlignment(Element.ALIGN_CENTER);
            document.add(title);
            document.add(new Paragraph(" "));

            LocalDateTime now = LocalDateTime.now();
            document.add(new Paragraph("Generated Date: " + now.format(
                    DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"))));

            User currentUser = SessionManager.getCurrentUser();
            if (currentUser != null) {
                document.add(new Paragraph("Generated By: " + currentUser.getUsername()));
            }

            document.add(new Paragraph(" "));

            boolean isInvoiceReport = "Invoice Report".equals(reportType);

            if (customerSummaryBox != null && customerSummaryBox.isVisible() && isInvoiceReport) {
                PdfPTable customerInfoTable = new PdfPTable(1);
                customerInfoTable.setWidthPercentage(100);
                customerInfoTable.getDefaultCell().setBorderWidth(0);
                customerInfoTable.getDefaultCell().setPadding(5);
                customerInfoTable.getDefaultCell().setBackgroundColor(new BaseColor(240, 240, 240));

                for (javafx.scene.Node node : customerSummaryBox.getChildren()) {
                    if (node instanceof Label) {
                        Label label = (Label) node;
                        String text = label.getText();

                        Font font = new Font(Font.FontFamily.HELVETICA, 10);
                        if (text.startsWith("Customer:")) {
                            font = new Font(Font.FontFamily.HELVETICA, 12, Font.BOLD);
                        }

                        Paragraph p = new Paragraph(text, font);
                        PdfPCell cell = new PdfPCell(p);
                        cell.setBorder(Rectangle.NO_BORDER);
                        cell.setPadding(2);
                        customerInfoTable.addCell(cell);
                    }
                }

                document.add(customerInfoTable);
                document.add(new Paragraph(" "));
            }

            int visibleColumnsCount = reportTableView.getColumns().size();

            if (visibleColumnsCount == 0) {
                document.add(new Paragraph("No columns to display"));
            } else {
                PdfPTable pdfTable = new PdfPTable(visibleColumnsCount);
                pdfTable.setWidthPercentage(100);

                String[] columnTitles = new String[visibleColumnsCount];
                float[] columnWidths = new float[visibleColumnsCount];

                for (int i = 0; i < visibleColumnsCount; i++) {
                    String columnTitle = reportTableView.getColumns().get(i).getText();
                    columnTitles[i] = columnTitle;

                    if (columnTitle.contains("Date") || columnTitle.contains("Time")) {
                        columnWidths[i] = 2.5f;
                    } else if (columnTitle.contains("Invoice Number") || columnTitle.contains("ID")) {
                        columnWidths[i] = 1.5f;
                    } else if (columnTitle.contains("Price") || columnTitle.contains("Revenue") || 
                             columnTitle.contains("Count")) {
                        columnWidths[i] = 1.8f;
                    } else if (columnTitle.contains("Description") || columnTitle.contains("Info") || 
                              columnTitle.contains("Vehicle")) {
                        columnWidths[i] = 3.5f;
                    } else if (columnTitle.contains("Status") || columnTitle.contains("Service Type")) {
                        columnWidths[i] = 2.2f;
                    } else if (columnTitle.contains("Vin") || columnTitle.contains("VIN")) {
                        columnWidths[i] = 2.5f;
                    } else if (columnTitle.contains("Email")) {
                        columnWidths[i] = 3.0f;
                    } else if (columnTitle.contains("Phone")) {
                        columnWidths[i] = 2.0f;
                    } else if (columnTitle.contains("Mechanic") || columnTitle.contains("Name")) {
                        columnWidths[i] = 2.5f;
                    } else {
                        columnWidths[i] = 2.0f;
                    }
                }

                try {
                    pdfTable.setWidths(columnWidths);
                } catch (DocumentException e) {
                    System.err.println("Failed to set custom column widths: " + e.getMessage());
                }

                for (int i = 0; i < visibleColumnsCount; i++) {
                    PdfPCell header = new PdfPCell(new Phrase(columnTitles[i], 
                            new Font(Font.FontFamily.HELVETICA, 10, Font.BOLD)));
                    header.setHorizontalAlignment(Element.ALIGN_CENTER);
                    header.setVerticalAlignment(Element.ALIGN_MIDDLE);
                    header.setBackgroundColor(BaseColor.LIGHT_GRAY);
                    header.setPadding(5);
                    pdfTable.addCell(header);
                }

                for (ObservableList<Object> row : reportTableView.getItems()) {
                    for (int i = 0; i < visibleColumnsCount; i++) {
                        TableColumn<ObservableList<Object>, ?> column = reportTableView.getColumns().get(i);
                        Object cellValue = column.getCellData(row);
                        String cellText = cellValue != null ? cellValue.toString() : "";

                        PdfPCell cell = new PdfPCell(new Phrase(cellText, new Font(Font.FontFamily.HELVETICA, 9)));

                        String columnTitle = columnTitles[i];
                        if (columnTitle.contains("Price") || columnTitle.contains("Revenue") || 
                            columnTitle.contains("Count") || columnTitle.contains("Number") || 
                            columnTitle.contains("ID") || columnTitle.contains("Id")) {
                            cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                        } else if (columnTitle.contains("Date") || columnTitle.contains("Time")) {
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                        } else {
                            cell.setHorizontalAlignment(Element.ALIGN_LEFT);
                        }

                        cell.setPadding(4);
                        pdfTable.addCell(cell);
                    }
                }

                document.add(pdfTable);
            }

            if ("Revenue Report".equals(reportType) && isRevenueBoxVisible) {
                document.add(new Paragraph(" "));
                Font boldFont = new Font(Font.FontFamily.HELVETICA, 12, Font.BOLD);
                Paragraph summaryParagraph = new Paragraph("Total Revenue: " + totalRevenueText, boldFont);
                summaryParagraph.setAlignment(Element.ALIGN_RIGHT);
                document.add(summaryParagraph);
            }

            if (isOwedAmountBoxVisible) {
                Font boldFont = new Font(Font.FontFamily.HELVETICA, 12, Font.BOLD);
                Paragraph owedParagraph = new Paragraph("Owed Amount: " + owedAmountText, boldFont);
                owedParagraph.setAlignment(Element.ALIGN_RIGHT);
                document.add(owedParagraph);
            }

            PdfPageEventHelper event = new PdfPageEventHelper() {
                @Override
                public void onEndPage(PdfWriter writer, Document document) {
                    try {
                        Font font = new Font(Font.FontFamily.HELVETICA, 8);
                        Phrase footerText = new Phrase("Page " + writer.getPageNumber(), font);
                        ColumnText.showTextAligned(writer.getDirectContent(),
                                Element.ALIGN_RIGHT,
                                footerText,
                                document.right(),
                                document.bottom() - 30, 0);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            };
            writer.setPageEvent(event);

            document.close();

            AlertDialog.showSuccess("Export Successful", "Report successfully exported as PDF: " + file.getName());

            try {
                if (Desktop.isDesktopSupported()) {
                    Desktop desktop = Desktop.getDesktop();
                    if (desktop.isSupported(Desktop.Action.OPEN)) {
                        desktop.open(file);
                    } else {
                        System.out.println("Open action not supported on this platform");
                    }
                } else {
                    System.out.println("Desktop features not supported on this platform");
                }
            } catch (IOException e) {
                System.err.println("Error opening PDF file: " + e.getMessage());
            }
        } catch (Exception e) {
            AlertDialog.showError("Export Error", "Failed to export PDF report: " + e.getMessage());
            e.printStackTrace();
        }
    }
}
